# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 Stream Processor deployment with Clustering
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cluster Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
      - Label:
          default: Network Configuration
        Parameters:
          - CertificateName
      - Label:
          default: Database Credentials
        Parameters:
          - DBUsername
          - DBPassword
      - Label:
          default: WUM Credentials
        Parameters:
          - WUMUsername
          - WUMPassword
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      CertificateName:
        default: SSL Certificate Name
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: Username
      DBPassword:
        default: Password
      JDK:
        default: JDK Version
      WUMUsername:
        default: Username
      WUMPassword:
        default: Password
      WSO2InstanceType:
        default: Instance Type
Resources:
  # networking configurations
  WSO2SPVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  WSO2SPPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2SPVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2SPPublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2SPVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  WSO2SPPublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  WSO2SPPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2SPVPC
  WSO2SPPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2SPPublicRouteTable
      SubnetId: !Ref WSO2SPPublicSubnet1
  WSO2SPPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2SPPublicRouteTable
      SubnetId: !Ref WSO2SPPublicSubnet2
  WSO2SPPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WSO2SPPublicRouteTable
      GatewayId: !Ref WSO2SPPublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2SPVPCInternetGatewayAttachment
  WSO2SPVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref WSO2SPPublicInternetGateway
      VpcId: !Ref WSO2SPVPC
  WSO2SPPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2SPVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2SPPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2SPVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2SPPrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2SPVPC
  WSO2SPPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2SPNATGateway
      RouteTableId: !Ref WSO2SPPrivateSubnetRouteTable
  WSO2SPPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2SPPrivateSubnetRouteTable
      SubnetId: !Ref WSO2SPPrivateSubnet1
  WSO2SPPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2SPPrivateSubnetRouteTable
      SubnetId: !Ref WSO2SPPrivateSubnet2
  WSO2SPNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - WSO2SPEIP
        - AllocationId
      SubnetId: !Ref WSO2SPPublicSubnet1
  WSO2BastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt WSO2BastionEIP.AllocationId
      InstanceId: !Ref WSO2BastionInstance
  WSO2SPEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WSO2BastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  # database configurations
  WSO2SPDBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  WSO2SPDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - !Ref WSO2SPDBInstanceSecurityGroup
      DBInstanceClass: db.t2.medium
      AllocatedStorage: 5
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: WSO2SPDBInstance
      DBName: WSO2_SP_DB
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'true'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2SPDBSubnetGroup
  WSO2SPDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref WSO2SPPrivateSubnet1
        - !Ref WSO2SPPrivateSubnet2
  # File system configurations
  WSO2SPEFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  WSO2SPEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2SPPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2SPPrivateSubnet1
      FileSystemId: !Ref WSO2SPEFSFileSystem
      SecurityGroups:
        - !Ref WSO2SPEFSSecurityGroup
  WSO2SPPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2SPPrivateSubnet2
      FileSystemId: !Ref WSO2SPEFSFileSystem
      SecurityGroups:
        - !Ref WSO2SPEFSSecurityGroup
  # Product configurations
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: WSO2 Bastion node Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WSO2SPSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: WSO2 Stream Processor Security Group
      GroupName: WSO2SecurityGroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2SPLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2SPLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '7711'
          ToPort: '7711'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7611'
          ToPort: '7611'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7070'
          ToPort: '7070'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '7443'
          ToPort: '7443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9444'
          ToPort: '9444'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
  WSO2BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2SPAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu180464bit
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2BastionInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2SPPublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu180464bit
      InstanceType: !Ref WSO2InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2SPPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'export PATH=~/.local/bin:$PATH'
            - echo "> Set hostname to puppetmaster"
            - hostname puppetmaster
            - echo $(hostname) >> /etc/hostname
            - echo "127.0.0.1 $(hostname)" >> /etc/hosts
            - sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
            - sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
            - service puppetmaster restart
            - !Sub "./home/ubuntu/sp-init.sh ${WUMUsername} ${WUMPassword}"
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2SPLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/sp_worker/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/sp_worker/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/sp_worker/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2SPDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/code/environments/production/modules/sp_worker/manifests/params.pp
            - export DB_NAME=WSO2_SP_DB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2SPDBInstance
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2SPDBInstance
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_sp.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_sp.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2SPDBInstance
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_sp.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2SPDBInstance
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_sp.sh
            - bash /usr/local/bin/provision_db_sp.sh
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: WSO2 PuppetMaster Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
  WSO2SPNode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2SPAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu180464bit
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2SPSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'export PATH=~/.local/bin:$PATH'
            - apt-get update
            - apt-get install -y puppet
            - apt-get install -y nfs-common
            - sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
            - !Join
              - ''
              - - export PuppetmasterIP=
                - !GetAtt
                  - PuppetMaster
                  - PrivateIp
            - echo "${PuppetmasterIP} puppet puppetmaster" >> /etc/hosts
            - service puppet restart
            - mkdir -p /mnt/efs
            - !Sub "mount -t nfs4 -o nfsvers=4.1 ${WSO2SPEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs"
            - sleep 400
            - export FACTER_profile=sp_worker
            - puppet agent -vt
            - sleep 60
            - apt-get install -y python3-pip
            - pip3 install boto3
            - !Sub "PRIVATE_IP=$(python3 /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2SPInstance1)"
            - !Join
              - ''
              - - sed -i "s/HOST_ID/
                - $PRIVATE_IP
                - >-
                  /g"
                  /usr/lib/wso2/wso2sp/4.3.0/wso2sp-4.3.0/conf/worker/deployment.yaml
            - /usr/lib/wso2/wso2sp/4.3.0/wso2sp-4.3.0/bin/worker.sh start
            - echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
            - cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2SPSecurityGroup
      - WSO2SPLoadBalancer
      - WSO2SPVPCInternetGatewayAttachment
      - WSO2SPDBInstance
      - PuppetMaster
  WSO2SPNode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2SPNode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LoadBalancerNames:
        - !Ref WSO2SPLoadBalancer
      VPCZoneIdentifier:
        - !Ref WSO2SPPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2SPInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: SP
          PropagateAtLaunch: 'true'
    DependsOn:
      - WSO2SPLoadBalancer
      - WSO2SPNode1LaunchConfiguration
  WSO2SPNode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2SPAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu180464bit
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2SPSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'export PATH=~/.local/bin:$PATH'
            - apt-get update
            - apt-get install -y puppet
            - apt-get install -y nfs-common
            - sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
            - !Join
              - ''
              - - export PuppetmasterIP=
                - !GetAtt
                  - PuppetMaster
                  - PrivateIp
            - echo "${PuppetmasterIP} puppet puppetmaster" >> /etc/hosts
            - service puppet restart
            - mkdir -p /mnt/efs
            - !Sub "mount -t nfs4 -o nfsvers=4.1 ${WSO2SPEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs"
            - sleep 400
            - export FACTER_profile=sp_worker
            - puppet agent -vt
            - sleep 60
            - apt-get install -y python3-pip
            - pip3 install boto3
            - !Sub "PRIVATE_IP=$(python3 /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2SPInstance2)"
            - !Join
              - ''
              - - sed -i "s/HOST_ID/
                - $PRIVATE_IP
                - >-
                  /g"
                  /usr/lib/wso2/wso2sp/4.3.0/wso2sp-4.3.0/conf/worker/deployment.yaml
            - /usr/lib/wso2/wso2sp/4.3.0/wso2sp-4.3.0/bin/worker.sh start
            - echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
            - cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2SPSecurityGroup
      - WSO2SPLoadBalancer
      - WSO2SPVPCInternetGatewayAttachment
      - WSO2SPDBInstance
      - PuppetMaster
  WSO2SPNode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2SPNode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      LoadBalancerNames:
        - !Ref WSO2SPLoadBalancer
      VPCZoneIdentifier:
        - !Ref WSO2SPPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2SPInstance2
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: SP
          PropagateAtLaunch: 'true'
    DependsOn:
      - WSO2SPLoadBalancer
      - WSO2SPNode2LaunchConfiguration
  WSO2SPLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2SPVPC
      GroupDescription: WSO2 SP ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9090'
          ToPort: '9090'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5701'
          ToPort: '5701'
          CidrIp: 0.0.0.0/0
  WSO2SPLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      CrossZone: true
      SecurityGroups:
        - !Ref WSO2SPLoadBalancerSecurityGroup
      Subnets:
        - !Ref WSO2SPPublicSubnet2
        - !Ref WSO2SPPublicSubnet1
      LBCookieStickinessPolicy:
        - PolicyName: LBStickyPolicy
      Listeners:
        - LoadBalancerPort: '9090'
          InstancePort: '9090'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '8280'
          InstancePort: '8280'
          Protocol: HTTP
          InstanceProtocol: HTTP
          PolicyNames:
            - LBStickyPolicy
        - LoadBalancerPort: '9443'
          InstancePort: '9443'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
        - LoadBalancerPort: '8243'
          InstancePort: '8243'
          Protocol: HTTPS
          InstanceProtocol: HTTPS
          PolicyNames:
            - LBStickyPolicy
          SSLCertificateId: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      HealthCheck:
          Target: 'TCP:9090'
          HealthyThreshold: '3'
          UnhealthyThreshold: '5'
          Interval: '10'
          Timeout: '5'
    DependsOn:
      - WSO2SPLoadBalancerSecurityGroup
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
  WUMUsername:
    Type: String
    Default: ""
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
      Ubuntu180464bit: ami-005d8154207e981a4
    eu-west-1:
      Ubuntu180464bit: ami-0ea3b70805378f796
    us-east-1:
      Ubuntu180464bit: ami-04db6acce789912b4
    us-east-2:
      Ubuntu180464bit: ami-0e8d8e6d8d5498378
    us-west-1:
      Ubuntu180464bit: ami-01c303b902735f14b
    us-west-2:
      Ubuntu180464bit: ami-0b0d60d0d5ed5c8c6
  WSO2SPAMIRegionMap:
    ap-southeast-2:
      Ubuntu180464bit: ami-07a3bd4944eb120a0
    eu-west-1:
      Ubuntu180464bit: ami-00035f41c82244dab
    us-east-1:
      Ubuntu180464bit: ami-0ac019f4fcb7cb7e6
    us-east-2:
      Ubuntu180464bit: ami-0f65671a86f061fcd
    us-west-1:
      Ubuntu180464bit: ami-063aa838bd7631e0b
    us-west-2:
      Ubuntu180464bit: ami-0bbe6b35405ecebdb
